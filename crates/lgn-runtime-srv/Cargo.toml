[package]
name = "runtime-srv"
version = "0.1.0"
authors = ["Legion Labs <devs@legionlabs.com>"]
edition = "2021"
license = "MIT OR Apache-2.0"

[dependencies]
# Legion engine
lgn-app = { path = "../lgn-app", version = "0.1.0" }
lgn-asset-registry = { path = "../lgn-asset-registry", version = "0.1.0" }
lgn-async = { path = "../lgn-async", version = "0.1.0" }
lgn-config = { path = "../lgn-config", version = "0.1.0" }
lgn-content-store = { path = "../lgn-content-store", version = "0.1.0" }
lgn-core = { path = "../lgn-core", version = "0.1.0" }
lgn-data-runtime = { path = "../lgn-data-runtime", version = "0.1.0" }
lgn-ecs = { path = "../lgn-ecs", version = "0.1.0" }
lgn-graphics-data = { path = "../lgn-graphics-data", version = "0.1.0", features = [
    "runtime",
] }
lgn-graphics-renderer = { path = "../lgn-graphics-renderer", version = "0.1.0" }
lgn-grpc = { path = "../lgn-grpc", version = "0.1.0" }
lgn-hierarchy = { path = "../lgn-hierarchy", version = "0.1.0" }
lgn-input = { path = "../lgn-input", version = "0.1.0" }
lgn-log-stream = { path = "../lgn-log-stream", version = "0.1.0" }
lgn-log-stream-proto = { path = "../lgn-log-stream-proto", version = "0.1.0" }
lgn-online = { path = "../lgn-online", version = "0.1.0" }
lgn-physics = { path = "../lgn-physics", version = "0.1.0" }
lgn-presenter-window = { path = "../lgn-presenter-window", version = "0.1.0", optional = true }
lgn-runtime-proto = { path = "../lgn-runtime-proto", version = "0.1.0" }
lgn-scene-plugin = { path = "../lgn-scene-plugin", version = "0.1.0" }
lgn-scripting = { path = "../../crates/lgn-scripting", version = "0.1.0", features = [
    "runtime",
] }
lgn-streamer = { path = "../lgn-streamer", version = "0.1.0" }
lgn-telemetry-sink = { path = "../lgn-telemetry-sink", version = "0.1.0" }
lgn-tracing = { path = "../lgn-tracing", version = "0.1.0" }
lgn-transform = { path = "../lgn-transform", version = "0.1.0" }
lgn-utils = { path = "../lgn-utils", version = "0.1.0" }
lgn-window = { path = "../lgn-window", version = "0.1.0" }
lgn-winit = { path = "../lgn-winit", version = "0.1.0", optional = true }

generic-data = { path = "../../tests/generic-data", version = "0.1.0", features = [
    "runtime",
] }
sample-data = { path = "../../tests/sample-data", version = "0.1.0", features = [
    "runtime",
] }

# other
clap = { version = "3.0", features = ["derive"] }
crossbeam-channel = "0.5.1"
instant = { version = "0.1", features = ["wasm-bindgen"] }
serde = "1"
tokio = { version = "1.13", features = ["full", "tracing"] }
tonic = "0.6"

[target.'cfg(any(target_os = "linux", target_os = "windows"))'.dependencies]
lgn-streamer = { path = "../lgn-streamer", version = "0.1.0", features = [
    "vulkan",
] }

[features]
standalone = ["lgn-presenter-window", "lgn-winit"]

[target.'cfg(target_os = "linux")'.dependencies]
lgn-winit = { path = "../lgn-winit", features = ["x11"] }

[[package.metadata.monorepo.publish]]
type = "docker"
allow-aws-ecr-creation = true
extra-files = [
    { source = "nvidia_icd.json", destination = "/etc/vulkan/icd.d/" },
]
target-bin-dir = "/usr/src/app"
template = '''
FROM ubuntu:20.04

RUN apt-get update && apt-get install -y --no-install-recommends \
    wget ca-certificates \
    unzip \
    gnupg \
    libx11-xcb-dev \
    libxkbcommon-dev \
    libwayland-dev \
    libxrandr-dev \
    libegl1-mesa-dev

RUN wget -qO lunarg-signing-key-pub.asc https://packages.lunarg.com/lunarg-signing-key-pub.asc && \
    apt-key add lunarg-signing-key-pub.asc && \
    wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.204-focal.list https://packages.lunarg.com/vulkan/1.3.204/lunarg-vulkan-1.3.204-focal.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends vulkan-sdk && \
    echo "/usr/lib/dxc" | tee -a /etc/ld.so.conf.d/dxc.conf && \
    ldconfig

RUN wget -qO /tmp/driver.zip https://s3.amazonaws.com/nvidia-gaming/linux/latest/510.60.02-March2022-Cloud_Gaming-Linux-Guest-Drivers.zip && \
    unzip /tmp/driver.zip -d /tmp/driver && \
    chmod u+x /tmp/driver/NVIDIA-Linux-x86_64-510.60.02-grid.run && \
    cd /tmp/driver && ./NVIDIA-Linux-x86_64-510.60.02-grid.run -s --extract-only && \
    cp -r /tmp/driver/NVIDIA-Linux-x86_64-510.60.02-grid/lib* /usr/lib/x86_64-linux-gnu/ && \
    rm -rf /tmp/driver* && \
    cd /usr/lib/x86_64-linux-gnu && \
    ln -s libcuda.so.510.60.02 libcuda.so.1 && ln -s libcuda.so.1 libcuda.so && \
    ln -s libnvidia-encode.so.510.60.02 libnvidia-encode.so.1 && ln -s libnvidia-encode.so.1 libnvidia-encode.so && \
    ln -s libnvcuvid.so.510.60.02 libnvcuvid.so.1 && ln -s libnvcuvid.so.1 libnvcuvid.so
    
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,graphics,video,utility

{ copy_all }

WORKDIR /usr/src/app

ENTRYPOINT ["{ binaries.runtime-srv }"]
'''

[[package.metadata.monorepo.publish]]
type = "zip"
extra-files = [
    { source = "../../legion.toml", destination = "" },
    { source = "../../tests/sample-data/runtime/*", destination = "tests/sample-data/runtime" },
    { source = "../../examples/physics/data/runtime/*", destination = "examples/physics/runtime" },
    { source = "../../examples/pong/data/runtime/*", destination = "examples/pong/runtime" },
]

[package.metadata.cargo-udeps.ignore]
# used only when standalone feature is not enabled
normal = ["lgn-async", "lgn-grpc", "lgn-streamer"]
