#ifndef MESH_DESCRIPTION_HSH
#define MESH_DESCRIPTION_HSH

#include "crate://lgn-graphics-renderer/gpu/cgen_type/mesh_description.hlsl"

template<typename TVertexIn>
TVertexIn LoadVertex(MeshDescription mesh_desc, uint vertexId) {
    TVertexIn vertex_in = (TVertexIn)0;
    vertex_in.pos = static_buffer.Load<float3>(mesh_desc.position_offset + vertexId * 12);
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_NORMAL)) {      
        vertex_in.normal = static_buffer.Load<float3>(mesh_desc.normal_offset + vertexId * 12);
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_TANGENT)) {     
        vertex_in.tangent = static_buffer.Load<float3>(mesh_desc.tangent_offset + vertexId * 12);
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_COLOR)) {
        uint packed_color = static_buffer.Load<uint>(mesh_desc.color_offset + vertexId * 4);       
        vertex_in.color = float4(
            (packed_color & 0x000000FF) / 255.f,
            ((packed_color & 0x0000FF00) >> 8) / 255.f,
            ((packed_color & 0x00FF0000) >> 16) / 255.f,
            ((packed_color & 0xFF000000) >> 24) / 255.f
        ); 
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_TEX_COORD)) {   
        vertex_in.uv_coord = static_buffer.Load<float2>(mesh_desc.tex_coord_offset + vertexId * 8);
    }
    return vertex_in;
}

#endif // MESH_DESCRIPTION_HSH
