#ifndef MESH_DESCRIPTION_HSH
#define MESH_DESCRIPTION_HSH

#include "crate://lgn-graphics-renderer/gpu/include/common.hsh"
#include "crate://lgn-graphics-renderer/gpu/cgen_type/mesh_description.hlsl"

template<typename TVertexIn>
TVertexIn LoadVertex(MeshDescription mesh_desc, uint vertexId) {
    TVertexIn vertex_in = (TVertexIn)0;
    vertex_in.pos = static_buffer.Load<float3>(mesh_desc.position_offset + vertexId * 12);
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_NORMAL)) {      
        uint pack = static_buffer.Load<uint>(mesh_desc.normal_offset + vertexId * 4);
        vertex_in.normal = float3(
            (pack >> 21)*2.0/(float)0x7FF - 1.0,
            (pack << 11 >> 21)*2.0/(float)0x7FF - 1.0,
            (pack << 22 >> 22)*2.0/(float)0x3FF - 1.0
        );
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_TANGENT)) {
        uint pack = static_buffer.Load<uint>(mesh_desc.tangent_offset + vertexId * 4);
        vertex_in.tangent = float4(
            (pack >> 21)*2.0/(float)0x7FF - 1.0,
            (pack << 11 >> 22)*2.0/(float)0x3FF - 1.0,
            (pack << 21 >> 22)*2.0/(float)0x3FF - 1.0,
            (pack & 1) > 0.0 ? 1.0 : -1.0
        );
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_COLOR)) {
        uint packed_color = static_buffer.Load<uint>(mesh_desc.color_offset + vertexId * 4);       
        vertex_in.color = unpack_linear(packed_color);
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_TEX_COORD)) {   
        vertex_in.uv_coord = static_buffer.Load<float2>(mesh_desc.tex_coord_offset + vertexId * 8);
    }
    return vertex_in;
}

#endif // MESH_DESCRIPTION_HSH
