#ifndef MESH_DESCRIPTION_HSH
#define MESH_DESCRIPTION_HSH

#include "crate://lgn-graphics-renderer/gpu/cgen_type/mesh_description.hlsl"

template<typename TVertexIn>
TVertexIn LoadVertex(MeshDescription mesh_desc, uint vertexId) {

    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_INDEX)) {
        vertexId = static_buffer.Load<uint>(mesh_desc.index_offset + vertexId * 4);
    }    

    TVertexIn vertex_in = (TVertexIn)0;
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_POSITION)) {    
        vertex_in.pos = static_buffer.Load<float4>(mesh_desc.position_offset + vertexId * 16);
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_NORMAL)) {      
        vertex_in.normal = static_buffer.Load<float4>(mesh_desc.normal_offset + vertexId * 16);
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_TANGENT)) {     
        vertex_in.tangent = static_buffer.Load<float4>(mesh_desc.tangent_offset + vertexId * 16);
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_COLOR)) {       
        vertex_in.color = static_buffer.Load<float4>(mesh_desc.color_offset + vertexId * 16);
    }
    if( mesh_desc.attrib_mask.is_set(MeshAttribMask_TEX_COORD)) {   
        vertex_in.uv_coord = static_buffer.Load<float2>(mesh_desc.tex_coord_offset + vertexId * 8);
    }
    return vertex_in;
}


#endif // MESH_DESCRIPTION_HSH
