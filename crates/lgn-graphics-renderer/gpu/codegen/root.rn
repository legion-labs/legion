mod mesh;
mod lighting;
mod egui;
mod const_color;
mod picking;
mod default_shader;
mod culling;
mod hzb;
mod depth_shader;
mod final_resolve;

const PERSISTENT_DESCRIPTOR_SET_FREQUENCY   = 0;
const FRAME_DESCRIPTOR_SET_FREQUENCY        = 1;
const VIEW_DESCRIPTOR_SET_FREQUENCY         = 2;
const USER_DESCRIPTOR_SET_FREQUENCY         = 3;

pub fn main() {

    let products = [];

    products.extend( mesh::main() );

    // 
    // Next step:
    // let view_data = Struct::from_json( ... );
    //

  
    let view_data = #{
        type: "Struct",
        name: "ViewData",
        fields: [
            #{ name:"camera_translation", ty:"Float3" },
            #{ name:"camera_rotation", ty:"Float4" },
            #{ name:"projection", ty:"Float4x4" },
            #{ name:"culling_planes", ty:"Float4", array_len:6 },
            #{ name:"pixel_size", ty:"Float4" },
            #{ name:"logical_size", ty:"Float4" },
            #{ name:"cursor_pos", ty:"Float2" },
        ]
    };
    products.push( view_data );

    let lighting_data = #{
        type: "Struct",
        name: "LightingData",
        fields: [
            #{ name: "num_directional_lights", ty:"Uint1" },
            #{ name: "num_omni_directional_lights", ty:"Uint1" },
            #{ name: "num_spot_lights", ty:"Uint1" },
            #{ name: "diffuse", ty:"Uint1" },
            #{ name: "specular", ty:"Uint1" },
            #{ name: "specular_reflection", ty:"Float1" },
            #{ name: "diffuse_reflection", ty:"Float1" },
            #{ name: "ambient_reflection", ty:"Float1" },
            #{ name: "shininess", ty:"Float1" },
            #{ name: "pad_", ty:"Uint3" },
        ]
    };
    products.push( lighting_data );
    
    let transform = #{
        type: "Struct",
        name: "TransformData",
        fields: [
            #{ name:"translation", ty:"Float3" },
            #{ name:"rotation", ty:"Float4" },
            #{ name:"scale", ty:"Float3" },
        ]
    };
    products.push( transform );
    
    let gpu_instance_color = #{
        type: "Struct",
        name: "GpuInstanceColor",
        fields: [
            #{ name:"color", ty:"Uint1" },
            #{ name:"color_blend", ty:"Float1" },
        ]
    };
    products.push( gpu_instance_color );

    let gpu_instance_picking_data = #{
        type: "Struct",
        name: "GpuInstancePickingData",
        fields: [
            #{ name:"picking_id", ty:"Uint1" },            
        ]
    };
    products.push( gpu_instance_picking_data );

    let gpu_instance_va_table = #{
        type: "Struct",
        name: "GpuInstanceVATable",
        fields: [
            #{ name:"mesh_description_va", ty:"Uint1" },
            #{ name:"world_transform_va", ty:"Uint1" },
            #{ name:"material_data_va", ty:"Uint1" },
            #{ name:"instance_color_va", ty:"Uint1" },
            #{ name:"picking_data_va", ty:"Uint1" },
        ]
    };
    products.push( gpu_instance_va_table );    

    let material_data = #{
        type: "Struct",
        name: "MaterialData",
        fields: [
            #{ name:"base_albedo", ty:"Float4" },
            #{ name:"base_metalness", ty:"Float1" },
            #{ name:"reflectance", ty:"Float1" },
            #{ name:"base_roughness", ty:"Float1" },
            #{ name:"albedo_texture", ty:"Uint1" },
            #{ name:"normal_texture", ty:"Uint1" },
            #{ name:"metalness_texture", ty:"Uint1" },
            #{ name:"roughness_texture", ty:"Uint1" },
            #{ name:"sampler", ty:"Uint1" },
        ]
    };
    products.push( material_data );    
    
    products.extend( lighting::main() );

    let persistent_descriptor_set = #{
        type: "DescriptorSet",
        name: "PersistentDescriptorSet",
        frequency: PERSISTENT_DESCRIPTOR_SET_FREQUENCY,
        descriptors: [            
            #{ type:"Texture2D", name:"material_textures", content:"Float4", array_len:10240, bindless:true },
            #{ type:"Sampler", name:"material_samplers", array_len:64 },         
        ]
    };
    products.push( persistent_descriptor_set );

    let frame_descriptor_set = #{
        type: "DescriptorSet",
        name: "FrameDescriptorSet",
        frequency: FRAME_DESCRIPTOR_SET_FREQUENCY,
        descriptors: [
            #{ type:"ConstantBuffer", name:"lighting_data", content:"LightingData" },
            #{ type:"StructuredBuffer", name:"directional_lights", content:"DirectionalLight" },
            #{ type:"StructuredBuffer", name:"omni_directional_lights", content:"OmniDirectionalLight" },
            #{ type:"StructuredBuffer", name:"spot_lights", content:"SpotLight" },
            #{ type:"ByteAddressBuffer", name:"static_buffer" },
            #{ type:"StructuredBuffer", name:"va_table_address_buffer", content:"Uint1" },
        ]
    };
    products.push( frame_descriptor_set );

    let view_descriptor_set = #{
        type: "DescriptorSet",
        name: "ViewDescriptorSet",
        frequency: VIEW_DESCRIPTOR_SET_FREQUENCY,
        descriptors: [
            #{name: "view_data", type:"ConstantBuffer", content:"ViewData" },            
            #{name: "hzb_texture", type: "Texture2D", content:"Float1" },
        ]
    };
    products.push( view_descriptor_set );

    products.extend( egui::main() );
    products.extend( hzb::main() );
    products.extend( final_resolve::main() );
    products.extend( const_color::main(persistent_descriptor_set, frame_descriptor_set, view_descriptor_set) );    
    products.extend( picking::main(persistent_descriptor_set, frame_descriptor_set, view_descriptor_set) );    
    products.extend( default_shader::main(persistent_descriptor_set, frame_descriptor_set, view_descriptor_set) );        
    products.extend( culling::main(persistent_descriptor_set, frame_descriptor_set, view_descriptor_set) );     
    products.extend( depth_shader::main(persistent_descriptor_set, frame_descriptor_set, view_descriptor_set) );        

    products
}