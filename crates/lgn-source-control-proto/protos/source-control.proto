syntax = "proto3";
package source_control;

import "google/protobuf/timestamp.proto";

service SourceControl {
  // RepositoryIndex operations.
  rpc RepositoryExists(RepositoryExistsRequest) returns (RepositoryExistsResponse) {};
  rpc CreateRepository(CreateRepositoryRequest) returns (CreateRepositoryResponse) {};
  rpc DestroyRepository(DestroyRepositoryRequest) returns (DestroyRepositoryResponse) {};
  rpc ListRepositories(ListRepositoriesRequest) returns (ListRepositoriesResponse) {};

  // Index operations.
  rpc RegisterWorkspace(RegisterWorkspaceRequest) returns (RegisterWorkspaceResponse) {};

  rpc GetBranch(GetBranchRequest) returns (GetBranchResponse) {};
  rpc ListBranches(ListBranchesRequest) returns (ListBranchesResponse) {};
  rpc UpdateBranch(UpdateBranchRequest) returns (UpdateBranchResponse) {};
  rpc InsertBranch(InsertBranchRequest) returns (InsertBranchResponse) {};

  rpc ListCommits(ListCommitsRequest) returns (ListCommitsResponse) {};
  rpc CommitToBranch(CommitToBranchRequest) returns (CommitToBranchResponse) {};

  rpc GetTree(GetTreeRequest) returns (GetTreeResponse) {};
  rpc SaveTree(SaveTreeRequest) returns (SaveTreeResponse) {};

  rpc Lock(LockRequest) returns (LockResponse) {};
  rpc Unlock(UnlockRequest) returns (UnlockResponse) {};
  rpc GetLock(GetLockRequest) returns (GetLockResponse) {};
  rpc ListLocks(ListLocksRequest) returns (ListLocksResponse) {};
  rpc CountLocks(CountLocksRequest) returns (CountLocksResponse) {};
}

message RepositoryExistsRequest {
  string repository_name = 1;
}

message RepositoryExistsResponse {
  bool exists = 1;
}

message CreateRepositoryRequest {
  string repository_name = 1;
}

message CreateRepositoryResponse {
  bool already_exists = 1;
}

message DestroyRepositoryRequest {
  string repository_name = 1;
}

message DestroyRepositoryResponse {
  bool does_not_exist = 1;
}

message ListRepositoriesRequest {}

message ListRepositoriesResponse {
  repeated string repository_names = 1;
}

message RegisterWorkspaceRequest {
  string repository_name = 1;
  WorkspaceRegistration workspace_registration = 2;
}

message RegisterWorkspaceResponse {}

message WorkspaceRegistration {
  string id = 1;
  string owner = 2;
}

message GetBranchRequest {
  string repository_name = 1;
  string branch_name = 2;
}

message GetBranchResponse {
  optional Branch branch = 1;
}

message Branch {
  string name = 1;
  uint64 head = 2;
  string lock_domain_id = 3;
}

message ListBranchesRequest {
  string repository_name = 1;
  string lock_domain_id = 2;
}

message ListBranchesResponse {
  repeated Branch branches = 1;
}

message ListCommitsRequest {
  string repository_name = 1;
  repeated uint64 commit_ids = 2;
  uint32 depth = 3;
}

message ListCommitsResponse {
  repeated Commit commits = 1;
}

message Commit {
  uint64 id = 1;
  string owner = 2;
  string message = 3;
  repeated Change changes = 4;
  string root_tree_id = 5;
  repeated uint64 parents = 6;
  google.protobuf.Timestamp timestamp = 7;
}

message Change {
  string canonical_path = 1;
  ChangeType change_type = 2;
}

message ChangeType {
  string old_id = 1;
  string new_id = 2;
}

message GetTreeRequest {
  string repository_name = 1;
  string tree_id = 2;
}

message GetTreeResponse {
  Tree tree = 1;
}

message Tree {
  string name = 1;
  string id = 2;
  repeated Tree children = 3;
}

message LockRequest {
  string repository_name = 1;
  Lock lock = 2;
}

message LockResponse {}

message Lock {
  string canonical_path = 1;
  string lock_domain_id = 2;
  string workspace_id = 3;
  string branch_name = 4;
}

message GetLockRequest {
  string repository_name = 1;
  string lock_domain_id = 2;
  string canonical_path = 3;
}

message GetLockResponse {
  optional Lock lock = 1;
}

message ListLocksRequest {
  string repository_name = 1;
  repeated string lock_domain_ids = 2;
}

message ListLocksResponse {
  repeated Lock locks = 1;
}

message SaveTreeRequest {
  string repository_name = 1;
  Tree tree = 2;
}

message SaveTreeResponse {
  string tree_id = 1;
}

message CommitToBranchRequest {
  string repository_name = 1;
  Commit commit = 2;
  Branch branch = 3;
}

message CommitToBranchResponse {
  uint64 commit_id = 1;
}

message UpdateBranchRequest {
  string repository_name = 1;
  Branch branch = 2;
}

message UpdateBranchResponse {}

message InsertBranchRequest {
  string repository_name = 1;
  Branch branch = 2;
}

message InsertBranchResponse {}

message UnlockRequest {
  string repository_name = 1;
  string lock_domain_id = 2;
  string canonical_path = 3;
}

message UnlockResponse {}

message CountLocksRequest {
  string repository_name = 1;
  repeated string lock_domain_ids = 2;
}

message CountLocksResponse {
  int32 count = 1;
}