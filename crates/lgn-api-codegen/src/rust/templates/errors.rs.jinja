use axum::{
    http::StatusCode,
    response::{IntoResponse, Response},
};
use lgn_tracing::error;

#[derive(thiserror::Error, Debug)]
pub enum Error {
    #[error("internal: {0}")]
    Internal(String),
    #[error("reqwest: {0}")]
    Reqwest(#[from] reqwest::Error),
    #[error("invalid header: {0}")]
    InvalidHeader(String),
    #[error("missing header: {0}")]
    MissingHeader(String),
}

pub type Result<T> = std::result::Result<T, Error>;

impl IntoResponse for Error {
    fn into_response(self) -> Response {
        match self {
            Self::Internal(err) => {
                error!("Internal server error: {}", err);
                StatusCode::INTERNAL_SERVER_ERROR.into_response()
            }
            Self::Reqwest(err) => {
                error!("Reqwest error: {:?}", err);
                StatusCode::INTERNAL_SERVER_ERROR.into_response()
            }
            Self::InvalidHeader(err) => {
                error!("Invalid header: {}", err);
                StatusCode::BAD_REQUEST.into_response()
            }            
            Self::MissingHeader(err) => {
                error!("Missing header: {}", err);
                StatusCode::BAD_REQUEST.into_response()
            }
        }
    }
}