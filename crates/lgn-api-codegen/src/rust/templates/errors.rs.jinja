use axum::{
    http::StatusCode,
    response::{IntoResponse, Response},
};
use lgn_tracing::error;

#[derive(thiserror::Error, Debug)]
pub enum Error {
    #[error("internal: {0}")]
    Internal(String),
    #[error("reqwest: {0}")]
    Reqwest(#[from] reqwest::Error),
    #[error("base64 decode: {0}")]
    Base64Decode(#[from] base64::DecodeError),
    #[error("utf8 decode: {0}")]
    Utf8Decode(#[from] std::string::FromUtf8Error),
    #[error("invalid header: {0}")]
    InvalidHeader(String),
    #[error("missing header: {0}")]
    MissingHeader(String),
}

pub type Result<T> = std::result::Result<T, Error>;

impl IntoResponse for Error {
    fn into_response(self) -> Response {
        match self {
            Self::Internal(err) => {
                error!("Internal server error: {}", err);
                StatusCode::INTERNAL_SERVER_ERROR.into_response()
            }
            Self::Reqwest(err) => {
                error!("Reqwest error: {:?}", err);
                StatusCode::INTERNAL_SERVER_ERROR.into_response()
            }
            Self::Base64Decode(err) => {
                error!("Base64 decode error: {:?}", err);
                StatusCode::BAD_REQUEST.into_response()
            }
            Self::Utf8Decode(err) => {
                error!("Utf8 decode error: {:?}", err);
                StatusCode::BAD_REQUEST.into_response()
            }
            Self::InvalidHeader(err) => {
                error!("Invalid header: {}", err);
                StatusCode::BAD_REQUEST.into_response()
            }
            Self::MissingHeader(err) => {
                error!("Missing header: {}", err);
                StatusCode::BAD_REQUEST.into_response()
            }
        }
    }
}