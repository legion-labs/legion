use super::{params, responses, requests};
use http::{header::CONTENT_TYPE, HeaderValue, Request, Response};
use hyper::service::Service;
use lgn_online::{
    codegen::Bytes,
    server::{Error, Result},
};
use lgn_tracing::debug;

#[derive(Debug)]
pub struct Client<C> {
    inner: C,
    base_uri: http::Uri,
}

impl<C> Client<C>{
    pub fn new(inner: C, base_uri: http::Uri) -> Self {
        Self {
            inner,
            base_uri,
        }
    }
}

impl<C, ResBody> Client<C>
where
    C: Service<Request<hyper::Body>, Response = Response<ResBody>> + Clone + Send + Sync,
    C::Error: Into<lgn_online::server::StdError>,
    C::Future: Send,
    ResBody: hyper::body::HttpBody + Send,
    ResBody::Data: Send,
    ResBody::Error: Into<lgn_online::server::StdError>,
{
{% for (path, routes) in api.paths %}
    {% for route in routes %}
        {% let enum_name = "{}Response"|format(route.name|pascal_case) %}

        /// Call to `{{ route.name|snake_case }}`.
        ///
        /// # Errors
        ///
        /// Returns an error in case of failure.
        pub async fn {{ route.name|snake_case }}(
            &self,
            {% if !route.has_empty_request() %}request: requests::{{ route.name|pascal_case }}Request{% endif %}
        ) -> Result<responses::{{ route.name|pascal_case }}Response> {
            self.{{ route.name|snake_case }}_with_parts({% if !route.has_empty_request() %}request{% endif %})
                .await
                .map(|(_, resp)| resp)
        }

        /// Call to `{{ route.name|snake_case }}` including response parts.
        ///
        /// # Errors
        ///
        /// Returns an error in case of failure.
        pub async fn {{ route.name|snake_case }}_with_parts(
            &self,
            {% if !route.has_empty_request() %}request: requests::{{ route.name|pascal_case }}Request{% endif %}
        ) -> Result<(http::response::Parts, responses::{{ route.name|pascal_case }}Response)> {
            let mut uri = format!(
                "{}://{}{{ path|fmt_rust_path }}",
                self.base_uri.scheme_str().unwrap(),
                self.base_uri.authority().unwrap()
                {% for parameter in route.parameters.path -%}
                    , lgn_online::codegen::encoding::to_percent_encoded_string(&request.{{ parameter.name|snake_case }})?
                {% endfor -%}
            );

            {% if !route.parameters.query.is_empty() %}
                let query = params::{{ route.name|pascal_case }}Query {
                    {% for parameter in route.parameters.query -%}
                        {{ parameter.name|snake_case }}: request.{{ parameter.name|snake_case }},
                    {% endfor -%}
                };
                let query_string = serde_qs::to_string(&query)?;
                if !query_string.is_empty() {
                    uri += &format!("?{}", query_string);
                }
            {% endif -%}

            debug!("{{ route.name|snake_case }}: {}", uri);

            {% if let Some(request_body) = route.request_body %}
                {% match request_body.content.media_type %}
                    {% when MediaType::Json %}
                        let body = hyper::Body::from(serde_json::to_string(&request.body)?);
                    {% when MediaType::Bytes %}
                        let body = hyper::Body::from(request.body);
                {% endmatch %}
            {% else %}
                let body = hyper::Body::empty();
            {% endif -%}

            let mut req = Request::builder()
                .method(hyper::Method::{{ route.method|uppercase }})
                .uri(uri)
                .body(body)?;

            {% if let Some(request_body) = route.request_body -%}
                req.headers_mut().insert(
                    CONTENT_TYPE,
                    HeaderValue::from_static("{{ request_body.content.media_type }}"),
                );
            {% endif -%}

            {% if !route.parameters.header.is_empty() %}
                {%- for parameter in route.parameters.header -%}
                    {% let param_name = "{}"|format(parameter.name|snake_case) %}
                    {% if parameter.required -%}
                        let {{ param_name }} = lgn_online::codegen::encoding::to_percent_encoded_string(&request.{{ param_name }})?;
                        req.headers_mut().insert(
                            "{{ parameter.name }}",
                            HeaderValue::from_str(&{{ param_name }}).map_err(|err| {
                                Error::BadRequest(format!("invalid header: {{ parameter.name }}: {}", err))
                            })?,
                        );
                    {% else -%}
                        if let Some({{ param_name }}) = request.{{ param_name }} {
                            let {{ param_name }} = lgn_online::codegen::encoding::to_percent_encoded_string(&{{ param_name }})?;
                            req.headers_mut().insert(
                                "{{ parameter.name }}",
                                HeaderValue::from_str(&{{ param_name }}).map_err(|err| {
                                    Error::BadRequest(format!("invalid header: {{ parameter.name }}: {}", err))
                                })?,
                            );
                        }
                    {% endif -%}
                {% endfor -%}
            {% endif -%}

            let mut client = self.inner.clone();
            let resp = client.call(req).await.map_err(Into::into)?;

            responses::{{ enum_name }}::from_response(resp).await
        }
    {% endfor %}
{% endfor %}
}
