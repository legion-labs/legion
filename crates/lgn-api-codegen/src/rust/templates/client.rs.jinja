use super::{params, responses, requests};
use http::{header::CONTENT_TYPE, HeaderValue};
use hyper::{Body, Method, Request};
use lgn_online::{
    codegen::{Bytes, Context},
    server::{Error, Result},
};

pub struct Client<C> {
    inner: hyper::Client<C>,
    base_uri: String,
}

impl<C> Client<C> {
    pub fn new(inner: hyper::Client<C>, base_uri: String) -> Self {
        Self {
            inner,
            base_uri,
        }
    }
}

#[async_trait::async_trait]
impl<C> super::Api for Client<C>
where
    C: hyper::client::connect::Connect + Clone + Send + Sync + 'static, {
{% for (path, routes) in api.paths %}
    {% for route in routes %}
        {% let enum_name = "{}Response"|format(route.name|pascal_case) %}

        {% include "signature.rs.jinja" %}{
            let mut uri = format!(
                "{}{{ path|fmt_rust_path }}",
                self.base_uri
                {% for parameter in route.parameters.path -%}
                    , lgn_online::codegen::encoding::to_percent_encoded_string(&request.{{ parameter.name|snake_case }})?
                {% endfor -%}
            );

            {% if !route.parameters.query.is_empty() %}
                let query = params::{{ route.name|pascal_case }}Query {
                    {% for parameter in route.parameters.query -%}
                        {{ parameter.name|snake_case }}: request.{{ parameter.name|snake_case }},
                    {% endfor -%}
                };
                let query_string = serde_qs::to_string(&query)?;
                if !query_string.is_empty() {
                    uri += &format!("?{}", query_string);
                }
            {% endif -%}

            let mut req = Request::builder()
                .method(Method::{{ route.method|uppercase }})
                .uri(uri)
            {% if let Some(request_body) = route.request_body %}
                {% match request_body.content.media_type %}
                    {% when MediaType::Json %}
                        .body(Body::from(serde_json::to_string(&request.body)?))
                            .map_err(|err| Error::Internal(format!("invalid body: {}", err)))?;
                    {% when MediaType::Bytes %}
                        .body(Body::from(request.body)).map_err(|err| {
                            Error::Internal(format!("invalid body: {}", err))
                        })?;
                {% endmatch %}
            {% else %}
                .body(Body::empty()).unwrap();
            {% endif -%}

            if let Some(extensions) = api_codegen_context.request_extensions() {
                req.extensions_mut().extend(extensions);
            }

            if let Some(headers) = api_codegen_context.request_headers() {
                req.headers_mut().extend(headers);
            }

            {% if let Some(request_body) = route.request_body -%}
                req.headers_mut().insert(
                    CONTENT_TYPE,
                    HeaderValue::from_static("{{ request_body.content.media_type }}"),
                );
            {% endif -%}

            {% if !route.parameters.header.is_empty() %}
                {%- for parameter in route.parameters.header -%}
                    {% let param_name = "{}"|format(parameter.name|snake_case) %}
                    {% if parameter.required -%}
                        let {{ param_name }} = lgn_online::codegen::encoding::to_percent_encoded_string(&request.{{ param_name }})?;
                        req.headers_mut().insert(
                            "{{ parameter.name }}",
                            HeaderValue::from_str(&{{ param_name }}).map_err(|err| {
                                Error::BadRequest(format!("invalid header: {{ parameter.name }}: {}", err))
                            })?,
                        );
                    {% else -%}
                        if let Some({{ param_name }}) = request.{{ param_name }} {
                            let {{ param_name }} = lgn_online::codegen::encoding::to_percent_encoded_string(&{{ param_name }})?;
                            req.headers_mut().insert(
                                "{{ parameter.name }}",
                                HeaderValue::from_str(&{{ param_name }}).map_err(|err| {
                                    Error::BadRequest(format!("invalid header: {{ parameter.name }}: {}", err))
                                })?,
                            );
                        }
                    {% endif -%}
                {% endfor -%}
            {% endif -%}

            let resp = self.inner.request(req).await?;

            let (parts, body) = resp.into_parts();
            let resp = responses::{{ enum_name }}::from_response(&parts, body).await;
            api_codegen_context.set_response(parts);
            resp
        }
    {% endfor %}
{% endfor %}
}
