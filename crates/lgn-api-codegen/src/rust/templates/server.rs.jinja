use super::params;
use super::requests;
use super::errors::{Error, Result};
use axum::{
    extract::Json, extract::Path, http::Request, response::{IntoResponse, Response}, routing, Extension, Router,
};
use serde_qs::axum::QsQuery;
use http::request::Parts;
use http::header::HeaderName;
use lgn_online::codegen::{Bytes, Context};
use lgn_tracing::error;

/// Register all the routes for that API to the specified Router.
#[must_use]
pub fn register_routes<T>(router: Router, api: T) -> Router
where
    T: super::Api + Clone + Send + Sync + 'static,
{
    router
    {% for (path, routes) in api.paths %}
        .route("{{ path|fmt_axum_path }}", 
            {% for route in routes -%}
                {% if loop.first %}routing::{% else %}.{% endif -%}
                {{ route.method|lower }}({{ route.name|snake_case }}::<T>)
            {%- endfor -%}
        )
    {%- endfor -%}
        .layer(Extension(api))
}

{% for (path, routes) in api.paths %}
    {% for route in routes %}
        async fn {{ route.name|snake_case }}<T>(
            Extension(api): Extension<T>,
            {% if !route.parameters.path.is_empty() -%}
                Path({{ route.parameters.path|join_names }}): Path<{{ route.parameters.path|join_types }}>,
            {% endif -%}
            {% if !route.parameters.query.is_empty() -%}
                QsQuery(query): QsQuery<params::{{ route.name|pascal_case }}Query>,
            {% endif -%}
            {% if let Some(request_body) = route.request_body -%}
                {% match request_body.content.media_type -%}
                    {% when MediaType::Json -%}
                        {%- if request_body.required -%}
                            Json(body): Json<{{ request_body.content.type_|fmt_type }}>,
                        {%- else -%}
                            Json(body): Json<Option<{{ request_body.content.type_|fmt_type }}>>,
                        {%- endif -%}
                    {% when MediaType::Bytes -%}
                        body: axum::body::Bytes,
                {% endmatch -%}
            {% endif -%}
            parts: Parts,
        ) -> Response
        where
            T: super::Api + Send + Sync + 'static,
        {
            {%- for parameter in route.parameters.header -%}
            {% let param_name = "{}"|format(parameter.name|snake_case) %}
                let {{ param_name }} = parts.headers.get(HeaderName::from_static("{{ parameter.name }}"));
                let {{ param_name }} = {{ param_name }}.map(|{{ param_name }}| {
                    {{ param_name }}
                        .to_str()
                        .map_err(|err| {
                            error!("Failed to read `{{ parameter.name }}` header: {}", err);
                            Error::InvalidHeader("{{ parameter.name }}".to_owned()).into_response()
                        })
                        .unwrap()
                        .to_owned()
                });

                {% if parameter.required %}
                    if {{ param_name }}.is_none() {
                        return Error::MissingHeader("{{ parameter.name }}".to_owned()).into_response();
                    }
                    let {{ param_name }} = {{ param_name }}.unwrap();
                {% endif %}
            {% endfor %}

            let mut context = Context::from(Some(parts.into()), None);
            let request = requests::{{ route.name|pascal_case }}Request {
                {%- for parameter in route.parameters.path -%}
                    {{ parameter.name|snake_case }}, 
                {%- endfor -%}
                {%- for parameter in route.parameters.query -%}
                    {{ parameter.name|snake_case }}: query.{{ parameter.name|snake_case }}, 
                {%- endfor -%}
                {%- for parameter in route.parameters.header -%}
                    {{ parameter.name|snake_case }}, 
                {%- endfor -%}
                {%- if let Some(request_body) = route.request_body -%}
                    {% match request_body.content.media_type -%}
                        {% when MediaType::Json -%}
                            body,
                        {% when MediaType::Bytes -%}
                            body: body.into(),
                    {% endmatch -%}
                {%- endif -%}
            };            

            let resp = api.{{ route.name|snake_case }}(&mut context, request).await;
            match resp {
                Ok(resp) => resp.into_response(),
                Err(err) => err.into_response(),
            }
        }
    {% endfor %}
{% endfor %}
