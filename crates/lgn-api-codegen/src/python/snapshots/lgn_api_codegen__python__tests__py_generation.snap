---
source: crates/lgn-api-codegen/src/python/mod.rs
expression: content
---
# Generated python API


# Models and API from: cars

from enum import Enum
from json import JSONEncoder

#used by fmt_type
from datetime import datetime, date
from typing import Any

# TODO(kdaibov): starting with Python 3.11 we could use StrEnum
# in that case we could remove the ModelEncoder
class ModelEncoder(JSONEncoder):
    def default(self, o):
        if isinstance(o, Enum):
            return o.value
        else:
            return o.__dict__



class TestAdditionalPropertiesCompositeAny200Response:
    def __init__(
        self,
        name, # : str 
        time, # : int 
        
        additional_properties: dict[str, Any]
        
    ):
        self.name = name
        self.time = time
    
        self.additional_properties = additional_properties
    

    def to_json(self):
        return ModelEncoder().encode(self)

    def from_json(body):
        name = body['name']
        time = body['time']
        return TestAdditionalPropertiesCompositeAny200Response(
            name,
            time,
        )

    def __str__(self):
        return ("TestAdditionalPropertiesCompositeAny200Response (\n"
        "  name : {}\n"
        "  time : {}\n"
        ")"
        ).format(
            self.name,
            self.time,
        )


class TestAdditionalPropertiesCompositeSchema200Response:
    def __init__(
        self,
        name, # : str 
        time, # : int 
        
        additional_properties: dict[str, Pet]
        
    ):
        self.name = name
        self.time = time
    
        self.additional_properties = additional_properties
    

    def to_json(self):
        return ModelEncoder().encode(self)

    def from_json(body):
        name = body['name']
        time = body['time']
        return TestAdditionalPropertiesCompositeSchema200Response(
            name,
            time,
        )

    def __str__(self):
        return ("TestAdditionalPropertiesCompositeSchema200Response (\n"
        "  name : {}\n"
        "  time : {}\n"
        ")"
        ).format(
            self.name,
            self.time,
        )


class TestOneOf200Response:
    def __init__(self, value):
        self.value = value 
        self.type = None
        
        if isinstance(value, Pet):
            self.type = Pet
        
        if isinstance(value, Car):
            self.type = Car
        
        if isinstance(value, Alpha):
            self.type = Alpha
        

    def from_json(body):
        value = None
        
        if "option1" in body:
            value = Pet.from_json(body["option1"])
        
        if "option2" in body:
            value = Car.from_json(body["option2"])
        
        if "option3" in body:
            value = Alpha.from_json(body["option3"])
        
        return TestOneOf200Response(
            value
        )

    def __str__(self):
        return "TestOneOf200Response ( value: {} )".format(self.value)

                




import abc


# ---------- Requests -------


class TestAdditionalPropertiesAnyRequest:
    def __init__(
        self,
    ):
        pass



class TestAdditionalPropertiesCompositeAnyRequest:
    def __init__(
        self,
    ):
        pass



class TestAdditionalPropertiesCompositeSchemaRequest:
    def __init__(
        self,
    ):
        pass



class TestAdditionalPropertiesSchemaRequest:
    def __init__(
        self,
    ):
        pass



class TestAdditionalPropertiesStringRequest:
    def __init__(
        self,
    ):
        pass



class TestHeadersRequest:
    def __init__(
        self,
        x_string_header: str = None,
        x_bytes_header: str = None,
        x_int_header: int = None,
    ):
        if x_string_header:
            self.x_string_header = x_string_header
        if x_bytes_header:
            self.x_bytes_header = x_bytes_header
        if x_int_header:
            self.x_int_header = x_int_header
        pass



class TestOneOfRequest:
    def __init__(
        self,
    ):
        pass



class GetCarsRequest:
    def __init__(
        self,
        space_id: str,
        other_query: str,
        names: list[str] = None,
        q: str = None,
    ):
        self.space_id = space_id
        self.other_query = other_query
        if names:
            self.names = names
        if q:
            self.q = q
        pass


class CreateCarRequest:
    def __init__(
        self,
        space_id: str,
        span_id: str = None,
        body: Car = None,
    ):
        self.space_id = space_id
        if span_id:
            self.span_id = span_id
        self.body = body
        pass



class GetCarRequest:
    def __init__(
        self,
        space_id: str,
        car_id: int,
    ):
        self.space_id = space_id
        self.car_id = car_id
        pass


class DeleteCarRequest:
    def __init__(
        self,
        space_id: str,
        car_id: int,
    ):
        self.space_id = space_id
        self.car_id = car_id
        pass



class TestBinaryRequest:
    def __init__(
        self,
        space_id: str,
        body: str = None,
    ):
        self.space_id = space_id
        self.body = body
        pass



# ---------- Responses -------

class TestAdditionalPropertiesAnyResponse:
    # status_200 = 200 # dict[string, Any] # Ok.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.json = response.json()
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("json", self.json)
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("TestAdditionalPropertiesAnyResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )



class TestAdditionalPropertiesCompositeAnyResponse:
    # status_200 = 200 # TestAdditionalPropertiesCompositeAny200Response # Ok.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.test_additional_properties_composite_any_200_response = TestAdditionalPropertiesCompositeAny200Response.from_json(response.json())
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("test_additional_properties_composite_any_200_response", self.test_additional_properties_composite_any_200_response)
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("TestAdditionalPropertiesCompositeAnyResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )



class TestAdditionalPropertiesCompositeSchemaResponse:
    # status_200 = 200 # TestAdditionalPropertiesCompositeSchema200Response # Ok.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.test_additional_properties_composite_schema_200_response = TestAdditionalPropertiesCompositeSchema200Response.from_json(response.json())
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("test_additional_properties_composite_schema_200_response", self.test_additional_properties_composite_schema_200_response)
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("TestAdditionalPropertiesCompositeSchemaResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )



class TestAdditionalPropertiesSchemaResponse:
    # status_200 = 200 # dict[string, Pet] # Ok.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.json = response.json()
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("json", self.json)
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("TestAdditionalPropertiesSchemaResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )



class TestAdditionalPropertiesStringResponse:
    # status_200 = 200 # dict[string, str] # Ok.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.json = response.json()
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("json", self.json)
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("TestAdditionalPropertiesStringResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )



class TestHeadersResponse:
    # status_200 = 200 # Pet # Ok.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.pet = Pet.from_json(response.json())
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("pet", self.pet)
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("TestHeadersResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )



class TestOneOfResponse:
    # status_200 = 200 # TestOneOf200Response # Ok.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.test_one_of_200_response = TestOneOf200Response.from_json(response.json())
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("test_one_of_200_response", self.test_one_of_200_response)
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("TestOneOfResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )



class GetCarsResponse:
    # status_200 = 200 # Cars # List of cars.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.cars = Cars.from_json(response.json())
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("cars", self.cars)
                
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("GetCarsResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )


class CreateCarResponse:
    # status_201 = 201 # Created.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 201:
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 201:
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("CreateCarResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )



class GetCarResponse:
    # status_200 = 200 # Car # A car.
    # status_404 = 404 # Car not found.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.car = Car.from_json(response.json())
                
                pass
            case 404:
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("car", self.car)
                
                pass
            case 404:
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("GetCarResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )


class DeleteCarResponse:
    # status_200 = 200 # Car deleted.
    # status_404 = 404 # Car not found.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                pass
            case 404:
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                pass
            case 404:
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("DeleteCarResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )



class TestBinaryResponse:
    # status_200 = 200 # str # Ok.
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
        self.status_code = response.status_code
        match response.status_code:
            case 200:
                self.bytes = response.content
                pass
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            case 200:
                value = ("bytes", self.bytes)
                pass
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("TestBinaryResponse (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )





# ---------- Api ----------
class Api(metaclass=abc.ABCMeta):

    @abc.abstractmethod
    def test_additional_properties_any(
        self,
        request: TestAdditionalPropertiesAnyRequest,
    ) -> TestAdditionalPropertiesAnyResponse:
        raise NotImplementedError
    

    @abc.abstractmethod
    def test_additional_properties_composite_any(
        self,
        request: TestAdditionalPropertiesCompositeAnyRequest,
    ) -> TestAdditionalPropertiesCompositeAnyResponse:
        raise NotImplementedError
    

    @abc.abstractmethod
    def test_additional_properties_composite_schema(
        self,
        request: TestAdditionalPropertiesCompositeSchemaRequest,
    ) -> TestAdditionalPropertiesCompositeSchemaResponse:
        raise NotImplementedError
    

    @abc.abstractmethod
    def test_additional_properties_schema(
        self,
        request: TestAdditionalPropertiesSchemaRequest,
    ) -> TestAdditionalPropertiesSchemaResponse:
        raise NotImplementedError
    

    @abc.abstractmethod
    def test_additional_properties_string(
        self,
        request: TestAdditionalPropertiesStringRequest,
    ) -> TestAdditionalPropertiesStringResponse:
        raise NotImplementedError
    

    @abc.abstractmethod
    def test_headers(
        self,
        request: TestHeadersRequest,
    ) -> TestHeadersResponse:
        raise NotImplementedError
    

    @abc.abstractmethod
    def test_one_of(
        self,
        request: TestOneOfRequest,
    ) -> TestOneOfResponse:
        raise NotImplementedError
    

    @abc.abstractmethod
    def get_cars(
        self,
        request: GetCarsRequest,
    ) -> GetCarsResponse:
        raise NotImplementedError
    
    @abc.abstractmethod
    def create_car(
        self,
        request: CreateCarRequest,
    ) -> CreateCarResponse:
        raise NotImplementedError
    

    @abc.abstractmethod
    def get_car(
        self,
        request: GetCarRequest,
    ) -> GetCarResponse:
        raise NotImplementedError
    
    @abc.abstractmethod
    def delete_car(
        self,
        request: DeleteCarRequest,
    ) -> DeleteCarResponse:
        raise NotImplementedError
    

    @abc.abstractmethod
    def test_binary(
        self,
        request: TestBinaryRequest,
    ) -> TestBinaryResponse:
        raise NotImplementedError
    


# ---------- Parameters -------


# ---------- Client -------
import requests
import urllib

class Client(Api):
    def __init__(self, uri):
        self.uri = uri

    
    def test_additional_properties_any(
        self,
        request: TestAdditionalPropertiesAnyRequest,
    ) -> TestAdditionalPropertiesAnyResponse:
        uri = "{}/test-additional-properties-any".format(
            self.uri,
        )

        headers = {}

        print("uri: {}".format(uri))

        resp = requests.get(
            uri,
            headers = headers,
        )


        return TestAdditionalPropertiesAnyResponse(resp)
    
    
    def test_additional_properties_composite_any(
        self,
        request: TestAdditionalPropertiesCompositeAnyRequest,
    ) -> TestAdditionalPropertiesCompositeAnyResponse:
        uri = "{}/test-additional-properties-composite-any".format(
            self.uri,
        )

        headers = {}

        print("uri: {}".format(uri))

        resp = requests.get(
            uri,
            headers = headers,
        )


        return TestAdditionalPropertiesCompositeAnyResponse(resp)
    
    
    def test_additional_properties_composite_schema(
        self,
        request: TestAdditionalPropertiesCompositeSchemaRequest,
    ) -> TestAdditionalPropertiesCompositeSchemaResponse:
        uri = "{}/test-additional-properties-composite-schema".format(
            self.uri,
        )

        headers = {}

        print("uri: {}".format(uri))

        resp = requests.get(
            uri,
            headers = headers,
        )


        return TestAdditionalPropertiesCompositeSchemaResponse(resp)
    
    
    def test_additional_properties_schema(
        self,
        request: TestAdditionalPropertiesSchemaRequest,
    ) -> TestAdditionalPropertiesSchemaResponse:
        uri = "{}/test-additional-properties-schema".format(
            self.uri,
        )

        headers = {}

        print("uri: {}".format(uri))

        resp = requests.get(
            uri,
            headers = headers,
        )


        return TestAdditionalPropertiesSchemaResponse(resp)
    
    
    def test_additional_properties_string(
        self,
        request: TestAdditionalPropertiesStringRequest,
    ) -> TestAdditionalPropertiesStringResponse:
        uri = "{}/test-additional-properties-string".format(
            self.uri,
        )

        headers = {}

        print("uri: {}".format(uri))

        resp = requests.get(
            uri,
            headers = headers,
        )


        return TestAdditionalPropertiesStringResponse(resp)
    
    
    def test_headers(
        self,
        request: TestHeadersRequest,
    ) -> TestHeadersResponse:
        uri = "{}/test-headers".format(
            self.uri,
        )

        headers = {}
        if request.x_string_header != None:
            headers["x-string-header"] = request.x_string_header
        if request.x_bytes_header != None:
            headers["x-bytes-header"] = request.x_bytes_header
        if request.x_int_header != None:
            headers["x-int-header"] = request.x_int_header

        print("uri: {}".format(uri))

        resp = requests.get(
            uri,
            headers = headers,
        )


        return TestHeadersResponse(resp)
    
    
    def test_one_of(
        self,
        request: TestOneOfRequest,
    ) -> TestOneOfResponse:
        uri = "{}/test-one-of".format(
            self.uri,
        )

        headers = {}

        print("uri: {}".format(uri))

        resp = requests.get(
            uri,
            headers = headers,
        )


        return TestOneOfResponse(resp)
    
    
    def get_cars(
        self,
        request: GetCarsRequest,
    ) -> GetCarsResponse:
        uri = "{}/v1/spaces/{}/car-service/cars".format(
            self.uri,
            request.space_id,
        )

        headers = {}
        params = {}
        uri+= "?"
        required = True
        if required or (hasattr(request, "other_query") and request.other_query):
            if isinstance(request.other_query, list):
                for num, item in enumerate(request.other_query):
                    if num > 0:
                        uri += '&'
                    uri += "other_query[{}]={}".format(num, item)
            else:
                params["other_query"] = request.other_query
        required = False
        if required or (hasattr(request, "names") and request.names):
            if isinstance(request.names, list):
                for num, item in enumerate(request.names):
                    if num > 0:
                        uri += '&'
                    uri += "names[{}]={}".format(num, item)
            else:
                params["names"] = request.names
        required = False
        if required or (hasattr(request, "q") and request.q):
            if isinstance(request.q, list):
                for num, item in enumerate(request.q):
                    if num > 0:
                        uri += '&'
                    uri += "q[{}]={}".format(num, item)
            else:
                params["q"] = request.q
        more_params = urllib.parse.urlencode(params, doseq=True)
        if uri[-1] != '?' and more_params:
            uri += "&{}".format(more_params)

        print("uri: {}".format(uri))
        print("params: {}".format(params))

        resp = requests.get(
            uri,
            #params = params,
            headers = headers,
        )


        return GetCarsResponse(resp)
    def create_car(
        self,
        request: CreateCarRequest,
    ) -> CreateCarResponse:
        uri = "{}/v1/spaces/{}/car-service/cars".format(
            self.uri,
            request.space_id,
        )

        headers = {}
        headers = {
            "Content-type": "application/json",
        }
        data = request.body.to_json()
        if request.span_id != None:
            headers["span-id"] = request.span_id

        print("uri: {}".format(uri))
        print("headers: {}".format(headers))
        print("data: {}".format(data))

        resp = requests.post(
            uri,
            headers = headers,
            data = data,
        )


        return CreateCarResponse(resp)
    
    
    def get_car(
        self,
        request: GetCarRequest,
    ) -> GetCarResponse:
        uri = "{}/v1/spaces/{}/car-service/cars/{}".format(
            self.uri,
            request.space_id,
            request.car_id,
        )

        headers = {}

        print("uri: {}".format(uri))

        resp = requests.get(
            uri,
            headers = headers,
        )


        return GetCarResponse(resp)
    def delete_car(
        self,
        request: DeleteCarRequest,
    ) -> DeleteCarResponse:
        uri = "{}/v1/spaces/{}/car-service/cars/{}".format(
            self.uri,
            request.space_id,
            request.car_id,
        )

        headers = {}

        print("uri: {}".format(uri))

        resp = requests.delete(
            uri,
            headers = headers,
        )


        return DeleteCarResponse(resp)
    
    
    def test_binary(
        self,
        request: TestBinaryRequest,
    ) -> TestBinaryResponse:
        uri = "{}/v1/spaces/{}/car-service/test-binary".format(
            self.uri,
            request.space_id,
        )

        headers = {}
        headers = {
            "Content-type": "application/octet-stream",
        }
        data = request.body

        print("uri: {}".format(uri))
        print("headers: {}".format(headers))
        print("data: {}".format(data))

        resp = requests.post(
            uri,
            headers = headers,
            data = data,
        )


        return TestBinaryResponse(resp)
    
    


# Models and API from: components

from enum import Enum
from json import JSONEncoder

#used by fmt_type
from datetime import datetime, date
from typing import Any

# TODO(kdaibov): starting with Python 3.11 we could use StrEnum
# in that case we could remove the ModelEncoder
class ModelEncoder(JSONEncoder):
    def default(self, o):
        if isinstance(o, Enum):
            return o.value
        else:
            return o.__dict__



class Alpha:
    def __init__(
        self,
        beta, # : Beta 
        
        
    ):
        self.beta = beta
    

    def to_json(self):
        return ModelEncoder().encode(self)

    def from_json(body):
        beta = Beta.from_json(body['beta'])
        return Alpha(
            beta,
        )

    def __str__(self):
        return ("Alpha (\n"
        "  beta : {}\n"
        ")"
        ).format(
            self.beta,
        )


class Beta:
    def __init__(
        self,
        value: list[Gamma]
    ):
        self.value = value

    def to_json(self):
        return ModelEncoder().encode(self)

    def from_json(body):
        return Beta(body)

    def __str__(self):
        return "Beta ( value: {} )".format(self.value)




class Car:
    def __init__(
        self,
        code, # : int 
        color, # : CarColor 
        extra, # : str 
        id, # : int 
        is_new, # : bool 
        name, # : str 
        
        
    ):
        self.code = code
        self.color = color
        self.extra = extra
        self.id = id
        self.is_new = is_new
        self.name = name
    

    def to_json(self):
        return ModelEncoder().encode(self)

    def from_json(body):
        code = body['code']
        color = CarColor.from_json(body['color'])
        extra = body['extra']
        id = body['id']
        is_new = body['is_new']
        name = body['name']
        return Car(
            code,
            color,
            extra,
            id,
            is_new,
            name,
        )

    def __str__(self):
        return ("Car (\n"
        "  code : {}\n"
        "  color : {}\n"
        "  extra : {}\n"
        "  id : {}\n"
        "  is_new : {}\n"
        "  name : {}\n"
        ")"
        ).format(
            self.code,
            self.color,
            self.extra,
            self.id,
            self.is_new,
            self.name,
        )

# The car color.
class CarColor(Enum):
    RED = "red"
    BLUE = "blue"
    YELLOW = "yellow"
    def from_json(value):
        return CarColor(value)


class Cars:
    def __init__(
        self,
        value: list[Car]
    ):
        self.value = value

    def to_json(self):
        return ModelEncoder().encode(self)

    def from_json(body):
        return Cars(body)

    def __str__(self):
        return "Cars ( value: {} )".format(self.value)




class Gamma:
    def __init__(self, value):
        self.value = value 
        self.type = None
        
        if isinstance(value, Alpha):
            self.type = Alpha
        

    def from_json(body):
        value = None
        
        if "option1" in body:
            value = Alpha.from_json(body["option1"])
        
        return Gamma(
            value
        )

    def __str__(self):
        return "Gamma ( value: {} )".format(self.value)

                



class Pet:
    def __init__(
        self,
        name, # : str 
        
        
    ):
        self.name = name
    

    def to_json(self):
        return ModelEncoder().encode(self)

    def from_json(body):
        name = body['name']
        return Pet(
            name,
        )

    def __str__(self):
        return ("Pet (\n"
        "  name : {}\n"
        ")"
        ).format(
            self.name,
        )




