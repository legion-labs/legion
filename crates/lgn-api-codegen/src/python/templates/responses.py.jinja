{%- for (path, routes) in api.paths %}
{%- for route in routes %}
{%- let response_name = "{}Response"|format(route.name|pascal_case) %}
class {{ response_name }}:
    {%- for (status_code, response) in route.responses %}
    {%- let status_name = "status_{}"|format(status_code) %}
    {%- if let Some(content) = response.content %}
    # {{ status_name }} = {{ status_code.as_u16() }} # {{ content.type_|fmt_type(ctx) }}
    {%- else %}
    # {{ status_name }} = {{ status_code.as_u16() }}
    {%- endif %} # {{ response.description }}
    {%- endfor %}
    
    def __init__(self, response):
        print("response: {}".format(response))
        print("response.text: {}".format(response.text))
    {%- if route.responses.is_empty() %}
        raise Exception("Unimplemented response. Status: {}".format(response.status_code))
    {%- else %}
        self.status_code = response.status_code
        match response.status_code:
            {%- for (status_code, response) in route.responses %}
            case {{ status_code.as_u16() }}:
                {%- if let Some(content) = response.content %}
                {%- match content.media_type %}
                {% when MediaType::Json %}
                {%- match content.type_ %}
                {%- when Type::Named with (_) %}
                {%- let type_name = content.type_|fmt_type(ctx) %}
                self.{{ type_name|snake_case }} = {{ type_name }}.from_json(response.json())
                {%- when Type::Array with (inner_type)%}
                {%- match inner_type.deref() %}
                {%- when Type::Named with (_) %}
                {%- let array_type_name = inner_type.deref()|fmt_type(ctx) %}
                self.{{ array_type_name|snake_case }} = []
                for item in response.json():
                    self.{{ array_type_name|snake_case }}.append({{ array_type_name }}.from_json(item))
                {%- else %}
                self.json = response.json()
                {%- endmatch %}
                {%- else %}
                self.json = response.json()
                {%- endmatch %}
                {% when MediaType::Bytes %}
                self.bytes = response.content
                {%- endmatch %}
                {%- endif %}
                pass
            {%- endfor %}
            case _:
                raise Exception("unexpected status code: {}".format(response.status_code))
    {% endif %}
    def __str__(self):
        value = ("value", "None")
        match self.status_code:
            {%- for (status_code, response) in route.responses %}
            case {{ status_code.as_u16() }}:
                {%- if let Some(content) = response.content %}
                {%- match content.media_type %}
                {% when MediaType::Json %}
                {%- match content.type_ %}
                {%- when Type::Named with (_) %}
                {%- let type_name = content.type_|fmt_type(ctx) %}
                value = ("{{ type_name|snake_case }}", self.{{ type_name|snake_case }})
                {%- when Type::Array with (inner_type)%}
                {%- match inner_type.deref() %}
                {%- when Type::Named with (_) %}
                {%- let array_type_name = inner_type.deref()|fmt_type(ctx) %}
                value = ("{{ array_type_name|snake_case }}", self.{{ array_type_name|snake_case }})
                {%- else %}
                value = ("json", self.json)
                {%- endmatch %}
                {%- else %}
                value = ("json", self.json)
                {%- endmatch %}
                {% when MediaType::Bytes %}
                value = ("bytes", self.bytes)
                {%- endmatch %}
                {%- endif %}
                pass
            {%- endfor %}
            case _:
                raise Exception("unexpected status code: {}".format(self.status_code))
        return ("{{ response_name }} (\n"
        "  status_code : {}\n"
        "  {} : {}\n"
        ")").format(
            self.status_code, 
            value[0], 
            value[1],
        )

{% endfor %}
{% endfor %}