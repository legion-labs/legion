type Fetch = typeof globalThis.fetch;

const defaultFetch = globalThis.fetch.bind(globalThis);

export abstract class ApiClient {
    protected fetch: Fetch;
    protected onRequestStartInterceptors: ((...request: Parameters<Fetch>) => (Promise<Parameters<Fetch>> | Parameters<Fetch>))[] = [];
    protected onRequestEndInterceptors: ((response: Response) => (Promise<Response> | Response))[] = [];

    constructor({
        fetch = defaultFetch,
    }: {
        fetch?: Fetch,
    }) {
        this.fetch = fetch;
    }

    addRequestStartInterceptor(interceptor: (...request: Parameters<Fetch>) => Promise<Parameters<Fetch>> | Parameters<Fetch>) {
        this.onRequestStartInterceptors.push(interceptor);
    }

    addRequestEndInterceptor(interceptor: (response: Response) => (Promise<Response> | Response)) {
        this.onRequestEndInterceptors.push(interceptor);
    }

    protected async performRequest(...args: Parameters<Fetch>): Promise<Response> {
        let fetchArgs = args;

        for (const interceptor of this.onRequestStartInterceptors) {
            fetchArgs = await interceptor(...fetchArgs);
        }

        let response = await this.fetch(...fetchArgs);

        for (const interceptor of this.onRequestEndInterceptors) {
            response = await interceptor(response);
        }

        return response;
    }
}