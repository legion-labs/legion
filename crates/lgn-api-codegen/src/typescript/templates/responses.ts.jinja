{% for (path, routes) in api.paths %}
    {% for route in routes %}
        {% let enum_name = "{}Response"|format(route.name|pascal_case) %}
        
        export type {{ enum_name }} = (
            {%- for (status_code, response) in route.responses -%}
                {% if let Some(content) = response.content -%}
                    | { /** {{ response.description }} */ type: "{{ status_code }}", value: {{ content.type_|fmt_type }} }
                {%- else -%}
                    | { /** {{ response.description }} */ type: "{{ status_code }}" }
                {%- endif -%}
            {%- endfor -%}
        );

        export const {{ enum_name }} = {
            async fromResponse(response: Response): Promise<{{ enum_name }}> {
                {% if route.responses.is_empty() %}
                    throw new InternalError(`unexpected status code: ${response.status}`);
                {% else %}
                    switch (response.status) {
                        {% for (status_code, response) in route.responses %}
                            case {{ status_code.as_u16() }}: { 
                                return {type: "{{ status_code }}", value: {%- if let Some(content) = response.content -%}
                                        {% match content.media_type %}
                                            {% when MediaType::Json %}
                                                await response.json()
                                            {% when MediaType::Bytes %}
                                                await response.blob()
                                        {% endmatch %}
                                    {%- endif -%}
                                }
                            }
                        {%- endfor -%}

                        default: {
                            throw new InternalError(`unexpected status code: ${status}`);
                        }
                    }
                {% endif %}
            } 
        }
    {% endfor %}
{% endfor %}