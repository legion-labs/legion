openapi: 3.0.2
servers:
  - url: /v3
info:
  description: |-
    This is a sample OpenAPI 3.0 specification.
  version: 1.0.0
  title: Test API
paths:
  /spaces/{space-id}/car-service/cars:
    get:
      description: Get cars.
      operationId: getCars
      parameters:
        - $ref: "#/components/parameters/SpaceId"
        - name: names
          in: query
          description: Names to filter by
          required: false
          schema:
            type: array
            items:
              type: string
        - name: q
          in: query
          description: Dynamic search
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of cars.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cars"
    post:
      description: Create a new car.
      operationId: createCar
      parameters:
        - $ref: "#/components/parameters/SpaceId"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
      requestBody:
        description: The content of the car.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
  /spaces/{space-id}/car-service/test-binary:
    post:
      operationId: testBinary
      parameters:
        - $ref: "#/components/parameters/SpaceId"
      responses:
        "200":
          description: Ok.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /test-one-of:
    get:
      operationId: testOneOf
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Pet"
                  - $ref: "#/components/schemas/Car"
components:
  parameters:
    SpaceId:
      name: space-id
      in: path
      description: The space identifier.
      required: true
      schema:
        type: string
  schemas:
    Cars:
      type: array
      items:
        $ref: "#/components/schemas/Car"
    Car:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        color:
          type: string
          description: The car color.
          enum:
            - red
            - blue
            - yellow
        is_new:
          type: boolean
        extra:
          type: string
          format: byte
    Pet:
      type: object
      properties:
        name:
          type: string
  requestBodies:
    Car:
      description: The content of the car.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Car"
