---
source: crates/lgn-api-codegen/src/typescript/mod.rs
expression: content
---
// Auto-generated file

import qs from "qs";

// ---------- Errors ----------

declare global {
  interface ErrorConstructor {
    captureStackTrace(thisArg: unknown, func: unknown): void;
  }
}

export class InternalError extends Error {
  constructor(message: string) {
    super(`Internal error: ${message}`);

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, InternalError);
    }

    this.name = "InternalError";
  }
}

// Models and API from: cars

export namespace Cars {
  export type CarModel = {
    color: CarModelColorModel;

    extra?: Blob;

    id: bigint;

    is_new: boolean;

    name: string;
  };

  /** The car color. */
  export type CarModelColorModel = "red" | "blue" | "yellow";

  export type CarsModel = CarModel[];

  export type PetModel = {
    name?: string;
  };

  export type TestOneOf200ResponseModel =
    | { type: "option1"; value: PetModel }
    | { type: "option2"; value: CarModel };

  // ---------- Api ----------

  export interface Api {
    testHeaders(input: {
      headers: {
        "x-string-header"?: string;
        "x-bytes-header"?: Blob;
        "x-int-header"?: number;
      };
    }): Promise<TestHeadersResponse>;

    testOneOf(): Promise<TestOneOfResponse>;

    getCars(input: {
      params: {
        "space-id": string;
      };

      query: {
        names?: string[];
        q?: string;
      };
    }): Promise<GetCarsResponse>;

    createCar(input: {
      params: {
        "space-id": string;
      };

      headers: {
        "span-id"?: string;
      };

      body: CarModel;
    }): Promise<CreateCarResponse>;

    getCar(input: {
      params: {
        "space-id": string;
        "car-id": bigint;
      };
    }): Promise<GetCarResponse>;

    deleteCar(input: {
      params: {
        "space-id": string;
        "car-id": bigint;
      };
    }): Promise<DeleteCarResponse>;

    testBinary(input: {
      params: {
        "space-id": string;
      };

      body: Blob;
    }): Promise<TestBinaryResponse>;
  }

  // ---------- Client ----------

  type Fetch = typeof globalThis.fetch;

  const defaultFetch = globalThis.fetch;

  export class Client implements Api {
    #baseUri: string | URL;
    #fetch: Fetch;

    constructor({
      baseUri,
      fetch = defaultFetch,
    }: {
      baseUri: string | URL;
      fetch?: Fetch;
    }) {
      this.#baseUri = baseUri;
      this.#fetch = fetch;
    }

    async testHeaders(input: {
      headers: {
        "x-string-header"?: string;
        "x-bytes-header"?: Blob;
        "x-int-header"?: number;
      };
    }): Promise<TestHeadersResponse> {
      const url = new URL(`${this.#baseUri}/test-headers`);

      const headers = new Headers();

      if ("x-string-header" in input.headers) {
        headers.set(
          "x-string-header",

          input.headers["x-string-header"]
        );
      }

      if ("x-bytes-header" in input.headers) {
        headers.set(
          "x-bytes-header",

          await input.headers["x-bytes-header"].text()
        );
      }

      if ("x-int-header" in input.headers) {
        headers.set(
          "x-int-header",

          input.headers["x-int-header"].toString()
        );
      }

      const response = await this.#fetch(url.toString(), {
        method: "GET",
        headers,
      });

      return TestHeadersResponse.fromResponse(response);
    }

    async testOneOf(): Promise<TestOneOfResponse> {
      const url = new URL(`${this.#baseUri}/test-one-of`);

      const headers = new Headers();

      const response = await this.#fetch(url.toString(), {
        method: "GET",
        headers,
      });

      return TestOneOfResponse.fromResponse(response);
    }

    async getCars(input: {
      params: {
        "space-id": string;
      };

      query: {
        names?: string[];
        q?: string;
      };
    }): Promise<GetCarsResponse> {
      const url = new URL(
        `${this.#baseUri}/v1/spaces/${
          input.params["space-id"]
        }/car-service/cars`
      );

      const query: GetCarsQuery = {
        names: input.query["names"],
        q: input.query["q"],
      };

      url.search = qs.stringify(query, { arrayFormat: "repeat" });

      const headers = new Headers();

      const response = await this.#fetch(url.toString(), {
        method: "GET",
        headers,
      });

      return GetCarsResponse.fromResponse(response);
    }

    async createCar(input: {
      params: {
        "space-id": string;
      };

      headers: {
        "span-id"?: string;
      };

      body: CarModel;
    }): Promise<CreateCarResponse> {
      const url = new URL(
        `${this.#baseUri}/v1/spaces/${
          input.params["space-id"]
        }/car-service/cars`
      );

      const headers = new Headers();

      headers.set("Content-Type", "application/json");

      if ("span-id" in input.headers) {
        headers.set(
          "span-id",

          input.headers["span-id"]
        );
      }

      const response = await this.#fetch(url.toString(), {
        method: "POST",
        headers,

        body: JSON.stringify(input.body),
      });

      return CreateCarResponse.fromResponse(response);
    }

    async getCar(input: {
      params: {
        "space-id": string;
        "car-id": bigint;
      };
    }): Promise<GetCarResponse> {
      const url = new URL(
        `${this.#baseUri}/v1/spaces/${
          input.params["space-id"]
        }/car-service/cars/${input.params["car-id"]}`
      );

      const headers = new Headers();

      const response = await this.#fetch(url.toString(), {
        method: "GET",
        headers,
      });

      return GetCarResponse.fromResponse(response);
    }

    async deleteCar(input: {
      params: {
        "space-id": string;
        "car-id": bigint;
      };
    }): Promise<DeleteCarResponse> {
      const url = new URL(
        `${this.#baseUri}/v1/spaces/${
          input.params["space-id"]
        }/car-service/cars/${input.params["car-id"]}`
      );

      const headers = new Headers();

      const response = await this.#fetch(url.toString(), {
        method: "DELETE",
        headers,
      });

      return DeleteCarResponse.fromResponse(response);
    }

    async testBinary(input: {
      params: {
        "space-id": string;
      };

      body: Blob;
    }): Promise<TestBinaryResponse> {
      const url = new URL(
        `${this.#baseUri}/v1/spaces/${
          input.params["space-id"]
        }/car-service/test-binary`
      );

      const headers = new Headers();

      headers.set("Content-Type", "application/octet-stream");

      const response = await this.#fetch(url.toString(), {
        method: "POST",
        headers,

        body: input.body,
      });

      return TestBinaryResponse.fromResponse(response);
    }
  }

  // ---------- Parameters ----------

  export type GetCarsQuery = {
    names?: string[];
    q?: string;
  };

  // ---------- Responses ----------

  export type TestHeadersResponse = { /** Ok. */ type: "200"; value: PetModel };

  export const TestHeadersResponse = {
    async fromResponse(response: Response): Promise<TestHeadersResponse> {
      switch (response.status) {
        case 200: {
          return {
            type: "200",
            value: await response.json(),
          };
        }
        default: {
          throw new InternalError(`unexpected status code: ${response.status}`);
        }
      }
    },
  };

  export type TestOneOfResponse = {
    /** Ok. */ type: "200";
    value: TestOneOf200ResponseModel;
  };

  export const TestOneOfResponse = {
    async fromResponse(response: Response): Promise<TestOneOfResponse> {
      switch (response.status) {
        case 200: {
          return {
            type: "200",
            value: await response.json(),
          };
        }
        default: {
          throw new InternalError(`unexpected status code: ${response.status}`);
        }
      }
    },
  };

  export type GetCarsResponse = {
    /** List of cars. */ type: "200";
    value: CarsModel;
  };

  export const GetCarsResponse = {
    async fromResponse(response: Response): Promise<GetCarsResponse> {
      switch (response.status) {
        case 200: {
          return {
            type: "200",
            value: await response.json(),
          };
        }
        default: {
          throw new InternalError(`unexpected status code: ${response.status}`);
        }
      }
    },
  };

  export type CreateCarResponse = { /** Created. */ type: "201" };

  export const CreateCarResponse = {
    async fromResponse(response: Response): Promise<CreateCarResponse> {
      switch (response.status) {
        case 201: {
          return {
            type: "201",
          };
        }
        default: {
          throw new InternalError(`unexpected status code: ${response.status}`);
        }
      }
    },
  };

  export type GetCarResponse =
    | { /** A car. */ type: "200"; value: CarModel }
    | { /** Car not found. */ type: "404" };

  export const GetCarResponse = {
    async fromResponse(response: Response): Promise<GetCarResponse> {
      switch (response.status) {
        case 200: {
          return {
            type: "200",
            value: await response.json(),
          };
        }
        case 404: {
          return {
            type: "404",
          };
        }
        default: {
          throw new InternalError(`unexpected status code: ${response.status}`);
        }
      }
    },
  };

  export type DeleteCarResponse =
    | { /** Car deleted. */ type: "200" }
    | { /** Car not found. */ type: "404" };

  export const DeleteCarResponse = {
    async fromResponse(response: Response): Promise<DeleteCarResponse> {
      switch (response.status) {
        case 200: {
          return {
            type: "200",
          };
        }
        case 404: {
          return {
            type: "404",
          };
        }
        default: {
          throw new InternalError(`unexpected status code: ${response.status}`);
        }
      }
    },
  };

  export type TestBinaryResponse = { /** Ok. */ type: "200"; value: Blob };

  export const TestBinaryResponse = {
    async fromResponse(response: Response): Promise<TestBinaryResponse> {
      switch (response.status) {
        case 200: {
          return {
            type: "200",
            value: await response.blob(),
          };
        }
        default: {
          throw new InternalError(`unexpected status code: ${response.status}`);
        }
      }
    },
  };
}

