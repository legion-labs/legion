[package]
name = "editor-srv"
version = "0.1.0"
edition = "2021"
license = "MIT OR Apache-2.0"

[dependencies]
# Legion engine
lgn-app = { path = "../lgn-app", version = "0.1.0" }
lgn-asset-registry = { path = "../lgn-asset-registry", version = "0.1.0" }
lgn-async = { path = "../lgn-async", version = "0.1.0" }
lgn-codec-api = { path = "../lgn-codec-api", version = "0.1.0" }
lgn-content-store = { path = "../lgn-content-store", version = "0.1.0" }
lgn-ecs = { path = "../lgn-ecs", version = "0.1.0" }
lgn-core = { path = "../lgn-core", version = "0.1.0" }
lgn-data-offline = { path = "../lgn-data-offline", version = "0.1.0" }
lgn-data-runtime = { path = "../lgn-data-runtime", version = "0.1.0" }
lgn-data-transaction = { path = "../lgn-data-transaction", version = "0.1.0" }
lgn-data-model = { path = "../lgn-data-model", version = "0.1.0" }
lgn-editor-proto = { path = "../lgn-editor-proto", version = "0.1.0" }
lgn-grpc = { path = "../lgn-grpc", version = "0.1.0" }
lgn-mp4 = { path = "../lgn-mp4", version = "0.1.0" }
lgn-graphics-renderer = { path = "../lgn-graphics-renderer", version = "0.1.0" }
lgn-resource-registry = { path = "../lgn-resource-registry", version = "0.1.0" }
lgn-source-control = { path = "../lgn-source-control", version = "0.1.0" }
lgn-streamer = { path = "../lgn-streamer", version = "0.1.0" }
lgn-tracing = { path = "../lgn-tracing", version = "0.1.0" }
lgn-transform = { path = "../lgn-transform", version = "0.1.0" }
lgn-config = { path = "../lgn-config", version = "0.1.0" }
lgn-input = { path = "../lgn-input" }
lgn-tasks = { path = "../lgn-tasks" }
lgn-telemetry-sink = { path = "../lgn-telemetry-sink", version = "0.1.0" }
lgn-window = { path = "../lgn-window", version = "0.1.0" }
tokio = { version = "1.13", features = ["full", "tracing"] }
tokio-stream = "0.1.8"
tonic = "0.6"
clap = { version = "3.0", features = ["derive"] }
anyhow = "1.0"
serde_json = "1.0"
erased-serde = "0.3.12"
inventory = "0.2"
uuid = { version = "0.8", features = ["v4"] }
bytes = "1.1.0"
thiserror = "1.0.30"

# PlugIn
generic-data = { path = "../../tests/generic-data", version = "0.1.0", features = [
    "offline",
    "runtime",
] }
sample-data = { path = "../../tests/sample-data", version = "0.1.0", features = [
    "offline",
    "runtime",
] }
lgn-graphics-data = { path = "../lgn-graphics-data", version = "0.1.0", features = [
    "offline",
    "runtime",
] }
lgn-physics = { path = "../lgn-physics", version = "0.1.0", features = [
    "offline",
    "runtime",
] }
lgn-scripting = { path = "../lgn-scripting", version = "0.1.0", features = [
    "offline",
    "runtime",
] }


[dev-dependencies]
tempfile = "3.2.0"
lgn-math = { path = "../lgn-math", version = "0.1.0" }
lgn-data-compiler = { path = "../lgn-data-compiler", version = "0.1.0" }
lgn-data-build = { path = "../lgn-data-build", version = "0.1.0" }
lgn-content-store = { path = "../lgn-content-store", version = "0.1.0" }
lgn-compiler-runtime-entity = { path = "../lgn-runtime-entity-compiler" }
lgn-compiler-script2asm = { path = "../lgn-script2asm-compiler", version = "0.1.0" }


[target.'cfg(any(target_os = "linux", target_os = "windows"))'.dependencies]
lgn-streamer = { path = "../lgn-streamer", version = "0.1.0", features = [
    "vulkan",
] }


[[package.metadata.monorepo.publish]]
type = "docker"
allow-aws-ecr-creation = true
extra-files = [
    { source = "../../tests/sample-data/*", destination = "/usr/src/app/tests/sample-data/" },
    { source = "../../legion.toml", destination = "/usr/src/app/" },
    { source = "nvidia_icd.json", destination = "/etc/vulkan/icd.d/" },
]
target-bin-dir = "/usr/src/app"
template = '''
FROM ubuntu:20.04

RUN apt-get update && apt-get install -y --no-install-recommends \
    wget ca-certificates \
    unzip \
    gnupg \
    libx11-xcb-dev \
    libxkbcommon-dev \
    libwayland-dev \
    libxrandr-dev \
    libegl1-mesa-dev

RUN wget -qO lunarg-signing-key-pub.asc https://packages.lunarg.com/lunarg-signing-key-pub.asc && \
    apt-key add lunarg-signing-key-pub.asc && \
    wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.204-focal.list https://packages.lunarg.com/vulkan/1.3.204/lunarg-vulkan-1.3.204-focal.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends vulkan-sdk && \
    echo "/usr/lib/dxc" | tee -a /etc/ld.so.conf.d/dxc.conf && \
    ldconfig

RUN wget -qO /tmp/driver.zip https://s3.amazonaws.com/nvidia-gaming/linux/latest/vGPUSW-495.50-Nov2021-vGaming-Linux-Guest-Drivers.zip && \
    unzip /tmp/driver.zip -d /tmp/driver && \
    chmod u+x /tmp/driver/Linux/NVIDIA-Linux-x86_64-495.50-grid.run && \
    cd /tmp/driver && ./Linux/NVIDIA-Linux-x86_64-495.50-grid.run -s --extract-only && \
    cp -r /tmp/driver/NVIDIA-Linux-x86_64-495.50-grid/lib* /usr/lib/x86_64-linux-gnu/ && \
    rm -rf /tmp/driver* && \
    cd /usr/lib/x86_64-linux-gnu && \
    ln -s libcuda.so.495.50 libcuda.so.1 && ln -s libcuda.so.1 libcuda.so && \
    ln -s libnvidia-encode.so.495.50 libnvidia-encode.so.1 && ln -s libnvidia-encode.so.1 libnvidia-encode.so && \
    ln -s libnvcuvid.so.495.50 libnvcuvid.so.1 && ln -s libnvcuvid.so.1 libnvcuvid.so
    
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,graphics,video,utility

{ copy_all }

EXPOSE 50051/tcp
EXPOSE 50051/udp

WORKDIR /usr/src/app

CMD ["{ binaries.editor-srv }", "--addr=0.0.0.0:50051"]
'''

[[package.metadata.monorepo.publish]]
type = "zip"
extra-files = [
    { source = "../../tests/sample-data/*", destination = "tests/sample-data" },
    { source = "../../legion.toml", destination = "" },
]
