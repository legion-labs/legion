mod lighting;

struct ViewData {
    view: Float4x4,
    inv_view: Float4x4,
    projection: Float4x4,
    inv_projection: Float4x4,
    projection_view: Float4x4,
    inv_projection_view: Float4x4,
    screen_size: Float4,
    cursor_pos: Float2,
}

struct LightingData {
    num_directional_lights: Uint1,
    num_omni_directional_lights: Uint1,
    num_spot_lights: Uint1,
    diffuse: Uint1,
    specular: Uint1,
    specular_reflection: Float1,
    diffuse_reflection: Float1,
    ambient_reflection: Float1,
    shininess: Float1,
    pad_: Uint3,
}

struct GpuInstanceTransform {
    world: Float4x4,
}

struct GpuInstanceColor {
    color: Float4,
    color_blend: Float1,
}

struct GpuInstancePickingData {
    picking_id: Uint1,
}

struct GpuInstanceVATable {
    vertex_buffer_va: Uint1,
    world_transform_va: Uint1,
    material_data_va: Uint1,
    instance_color_va: Uint1,
    picking_data_va: Uint1,
}

#[DescriptorSet(frequency = 0)]
struct FrameDescriptorSet {
    lighting_data: ConstantBuffer<LightingData>,
    directional_lights: StructuredBuffer<DirectionalLight>,
    omni_directional_lights: StructuredBuffer<OmniDirectionalLight>,
    spot_lights: StructuredBuffer<SpotLight>,
    static_buffer: ByteAddressBuffer,
}

#[DescriptorSet(frequency = 1)]
struct ViewDescriptorSet {
    view_data: ConstantBuffer<ViewData>,
}

//
// Egui
//

#[DescriptorSet(frequency = 0)]
struct EguiDescriptorSet {
    font_texture: Texture2D<Float4>,
    font_sampler: Sampler,    
}

struct EguiPushConstantData {
    scale: Float2,
    translation: Float2,
    width: Float1,
    height: Float1,
}

#[PipelineLayout]
struct EguiPipelineLayout {
    descriptor_set: DescriptorSet<EguiDescriptorSet>,    
    push_constant: PushConstant<EguiPushConstantData>,
}

//
// ConstColor
//

struct ConstColorPushConstantData {
    world: Float4x4,
    color: Float4,
    vertex_offset: Uint1,
}

#[PipelineLayout]
struct ConstColorPipelineLayout {
    frame_descriptor_set: DescriptorSet<FrameDescriptorSet>,    
    view_descriptor_set: DescriptorSet<ViewDescriptorSet>,    
    push_constant: PushConstant<ConstColorPushConstantData>,
}

//
// Picking
//

struct PickingData {
    picking_pos: Float3,
    picking_id: Uint1,
}

struct PickingPushConstantData {
    world: Float4x4,
    vertex_offset: Uint1,
    picking_id: Uint1,
    picking_distance: Float1,
    use_gpu_pipeline: Uint1,
}

#[DescriptorSet(frequency = 2)]
struct PickingDescriptorSet {
    picked_count: RWStructuredBuffer<Uint1>,
    picked_objects: RWStructuredBuffer<PickingData>,
}

#[PipelineLayout]
struct PickingPipelineLayout {
    frame_descriptor_set: DescriptorSet<FrameDescriptorSet>,
    view_descriptor_set: DescriptorSet<ViewDescriptorSet>,
    picking_descriptor_set: DescriptorSet<PickingDescriptorSet>,
    push_constant: PushConstant<PickingPushConstantData>,
}

//
// Shader
//

#[PipelineLayout]
struct ShaderPipelineLayout {
    frame_descriptor_set: DescriptorSet<FrameDescriptorSet>,
    view_descriptor_set: DescriptorSet<ViewDescriptorSet>,     
}

//
// Material
//

struct MaterialData {
    base_albedo: Float4,
    base_metalness: Float1,
    reflectance: Float1,
    base_roughness: Float1,
}
