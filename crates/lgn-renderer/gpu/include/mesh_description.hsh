struct MeshDescription
{
    uint format;
    uint position_offset;
    uint normal_offset;
    uint tex_coord_offset;
    uint index_offset;
    uint color_offset;
};

#define BIT_POSITION 0x0001
#define BIT_NORMAL 0x0002
#define BIT_TEX_COORD 0x0004
#define BIT_INDEX 0x0008
#define BIT_COLOR 0x0010

bool HasPosition(uint format) 
{
    return format & BIT_POSITION;
}

bool HasNormal(uint format) 
{
    return format & BIT_NORMAL;
}

bool HasTexCoord(uint format) 
{
    return format & BIT_TEX_COORD;
}

bool HasIndex(uint format) 
{
    return format & BIT_INDEX;
}

bool HasColor(uint format) 
{
    return format & BIT_COLOR;
}

template<typename TVertexIn>
TVertexIn LoadVertex(MeshDescription mesh_desc, uint vertexId) {
    if (HasIndex(mesh_desc.format))
    {
        vertexId = static_buffer.Load<uint>(mesh_desc.index_offset + vertexId * 4);
    }

    TVertexIn vertex_in;
    if (HasPosition(mesh_desc.format))
    {
        vertex_in.pos = static_buffer.Load<float4>(mesh_desc.position_offset + vertexId * 16);
    }
    if (HasNormal(mesh_desc.format))
    {
        vertex_in.normal = static_buffer.Load<float4>(mesh_desc.normal_offset + vertexId * 16);
    }
    if (HasColor(mesh_desc.format))
    {
        vertex_in.color = static_buffer.Load<float4>(mesh_desc.color_offset + vertexId * 16);
    }
    if (HasTexCoord(mesh_desc.format))
    {
        vertex_in.uv_coord = static_buffer.Load<float2>(mesh_desc.tex_coord_offset + vertexId * 8);
    }
    return vertex_in;
}