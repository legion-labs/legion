name: CI - Test

on:
  push:
    paths-ignore:
      - "docs/**"
      - ".github/workflows/ci_book.yml"
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Running code checks
    needs: base_ref_selection
    runs-on: [self-hosted, linux, common, build]
    env:
      LEGION_TELEMETRY_URL: ${{ secrets.LEGION_TELEMETRY_URL }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Print changed crates
        run: cargo m changed-since ${{ needs.base_ref_selection.outputs.base_ref }}

      - name: Run initial checks
        run: cargo m ci --changed-since ${{ needs.base_ref_selection.outputs.base_ref }} check

  test:
    name: Running tests
    needs: [lint, runner_selection, base_ref_selection]
    strategy:
      matrix:
        os:
          [
            "${{ fromJSON(needs.runner_selection.outputs.linux_runner) }}",
            "${{ fromJSON(needs.runner_selection.outputs.windows_runner) }}",
          ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Run tests
        run: cargo m ci --changed-since ${{ needs.base_ref_selection.outputs.base_ref }} test

      - name: Upload GPU-test diffs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2.3.1
        with:
          name: GPU test diffs
          path: ./tests/graphics-sandbox/diffs

  build_docs:
    name: Building docs
    needs: lint
    runs-on: [self-hosted, linux, common, build]
    steps:
      - uses: actions/checkout@v2

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Build docs
        run: cargo m doc

      - name: Upload docs
        uses: actions/upload-artifact@v2
        with:
          name: doc
          path: ./target/doc
          retention-days: 5

  deploy_docs:
    name: Deploying docs
    needs: [build_docs, test]
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: doc
          path: ./doc

      - run: sleep 5

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        continue-on-error: true
        with:
          deploy_key: ${{ secrets.DOCS_DEPLOY_KEY }}
          external_repository: legion-labs/api.legionengine.com
          publish_branch: main
          publish_dir: ./doc
          force_orphan: true
          cname: api.legionengine.com

  ###############################################################################

  base_ref_selection:
    name: Base ref selection
    runs-on: ubuntu-latest
    outputs:
      base_ref: ${{ steps.set-base-ref.outputs.base_ref }}
    steps:
      - name: Set base ref for PRs
        if: github.event_name == 'pull_request'
        run: echo "base_ref=origin/$GITHUB_BASE_REF" >> $GITHUB_ENV

      - name: Retrieve base ref for branch
        id: last-green-commit
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            const { GITHUB_REF_NAME } = process.env
            return github.rest.actions
              .listWorkflowRuns({
                owner,
                repo,
                workflow_id: "ci_test.yml",
                status: "success",
                branch: GITHUB_REF_NAME,
                event: "push",
              })
              .then((res) => {
                return res.data.workflow_runs.length > 0
                    ? res.data.workflow_runs[0].head_commit.id
                    : "HEAD";
              })
      - name: Set base ref for PRs
        if: github.event_name != 'pull_request'
        run: echo "base_ref=${{steps.last-green-commit.outputs.result}}" >> $GITHUB_ENV

      - name: Set base ref
        id: set-base-ref
        run: echo "::set-output name=base_ref::${{ env.base_ref }}"

  runner_selection:
    name: Runner selection
    needs: base_ref_selection
    runs-on: [self-hosted, linux, common, build]
    outputs:
      linux_runner: ${{ steps.changed-crates.outputs.linux_runner }}
      windows_runner: ${{ steps.changed-crates.outputs.windows_runner }}
    env:
      LEGION_TELEMETRY_URL: ${{ secrets.LEGION_TELEMETRY_URL }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Bootstrap
        uses: ./.github/actions/bootstrap

      - name: Test changed crates
        id: changed-crates
        run: |
          crates=$(cargo m changed-since "${{ needs.base_ref_selection.outputs.base_ref }}" --matches-any renderer graphics-sandbox)
          if [[ $? != 0 ]]; then
            echo "failed to detect changed crates"
            exit 1
          fi
          if [[ $crates ]]; then
            echo "A change impacting a graphics crate was detected"
            echo "Matched crates: $crates"
            echo "::set-output name=linux_runner::[[\"self-hosted\",\"linux\",\"gpu\",\"build\"]]"
            echo "::set-output name=windows_runner::[[\"self-hosted\",\"windows\",\"gpu\",\"build\"]]"
          else
            echo "No change impacting a graphics crate was detected"
            echo "::set-output name=linux_runner::[[\"self-hosted\",\"linux\",\"common\",\"build\"]]"
            echo "::set-output name=windows_runner::[[\"self-hosted\",\"windows\",\"common\",\"build\"]]"
          fi

  setup_container:
    name: Setup build env container
    runs-on: [self-hosted, linux, common, build]
    outputs:
      container: ${{ steps.set-repo-tag.outputs.container }}
    steps:
      - uses: actions/checkout@v2

      - name: Build
        env:
          MONOREPO_DOCKER_REGISTRY: ${{ secrets.MONOREPO_DOCKER_REGISTRY }}
        run: ./build/env/setup.sh

      - name: Set repo tag
        id: set-repo-tag
        run: echo "::set-output name=container::${{ env.ecr_repo_tag }}"

      - name: Install NodeJS script dependencies
        run: npm install tweetsodium

      - name: Set ECR password secret
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ECR_GH_ACCESS_TOKEN }}
          script: |
            const sodium = require('tweetsodium');

            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

            const options = {};
            options.silent = true;
            const ecr_login = await exec.getExecOutput('aws', ['ecr', 'get-login-password', '--region', 'ca-central-1'], options);

            const pub_key = await github.rest.actions.getRepoPublicKey({
                owner,
                repo,
            });
            const key = pub_key.data.key;
            const key_id = pub_key.data.key_id;
            const value = ecr_login.stdout;

            // Convert the message and key to Uint8Array's (Buffer implements that interface)
            const message_bytes = Buffer.from(value);
            const key_bytes = Buffer.from(key, 'base64');

            // Encrypt using LibSodium.
            const encrypted_bytes = sodium.seal(message_bytes, key_bytes);

            // Base64 the encrypted secret
            const encrypted_value = Buffer.from(encrypted_bytes).toString('base64');
            const secret_name = 'ECR_PASSWORD';
            await github.rest.actions.createOrUpdateRepoSecret({
                owner,
                repo,
                secret_name,
                encrypted_value,
                key_id,
            })

  test_build_env:
    name: Testing the Build environment
    needs: [setup_container]
    runs-on: [self-hosted, linux, common, build]
    container:
      image: ${{ needs.setup_container.outputs.container }}
      credentials:
        username: AWS
        password: ${{ secrets.ECR_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
      - run: cargo m --help
